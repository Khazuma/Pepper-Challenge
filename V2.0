"""
Pepper Challenge
Groupe 23 - Koh Ker
Logiciel


Conseil d'utilisation :

Avant de lancer ce logiciel, veillez à ce que les modules Numpy, Scipy ainsi que Termcolor soient bien installés sur
votre ordinateur. Dans le cas contraire, veuillez vous référer au mode d'emploi disponible sur python.org.

"""


from numpy import array, empty
from scipy.optimize import fsolve
from math import log, pi
from termcolor import colored


def environnement():

    """
    Calcule :   - les flux direct et indirect captés par unité de surface,
                - les humidités absolues à l'intérieur et à l'extérieur du séchoir.

    Constantes / Valeurs des tables utilisées : sigma, M_eau, M_air, R, Lh, E, P_sat_T_max, P_sat_T_amb
    Entrées : T_amb, X_amb, X_max, P_atm
    Sorties : T_dp, T_sky, Fd, Fi, P_vap_max, Y_max, P_vap_amb, Y_amb

    """

    T_dp = (Lh * M_eau * T_amb) / (Lh * M_eau - R * T_amb * log(X_amb)) # OK
    T_sky = T_amb * (0.711 + 0.0056 * (T_dp - 273.15) + 7.3e-5 * pow(T_dp - 273.15, 2)) ** (1/4)
    Fi = sigma * pow(T_sky, 4) # ?
    Fd = E - Fi # ? (valeur de E ?)

    P_vap_max = X_max * P_sat_T_max
    Y_max = (M_eau / M_air) * (P_vap_max / (P_atm - P_vap_max)) # OK
    P_vap_amb = X_amb * P_sat_T_amb
    Y_amb = (M_eau / M_air) * (P_vap_amb / (P_atm - P_vap_amb)) # OK

    return T_dp, T_sky, Fd, Fi, P_vap_max, Y_max, P_vap_amb, Y_amb


def ventilation():

    """
    Calcule le débit d'air nécessaire pour évacuer l'humidité accumulée dans le séchoir.

    Constantes / Valeurs des tables utilisées : M_air, R
    Entrées : m_produit, X_0, X_f, t, Y_max, Y_amb, T_amb, P_atm
    Sorties : m_seche, delta_masse_eau, J, rho_air, Q_massique, Q_volumique, vitesse_air

    """

    m_seche = m_produit / (1 + X_0)
    delta_masse_eau = (X_0 - X_f) * m_seche
    J = delta_masse_eau / t
    Q_massique = J / (Y_max - Y_amb) # ?

    rho_air = (M_air * P_atm) / (R * T_max) # OK
    Q_volumique = Q_massique / rho_air
    vitesse_air = Q_volumique / (pi * pow(rayon_ventilo, 2))


    return m_seche, delta_masse_eau, J, rho_air, Q_massique, Q_volumique, vitesse_air


def research_h():

    diffu_therm = condu_therm / (rho_air * Cp)
    Pr = visco_cinem / diffu_therm
    coeff_dilat = 1 / T_max
    Gr = (g * coeff_dilat * (T_plaque - T_amb) * pow(Lc, 3) * pow(rho_air, 2)) / pow(visco_dynam, 2)
    Nu = 0.1 * pow(Pr * Gr, 1/3)
    h = Nu * condu_therm / Lc # OK (valeur de T_plaque ?)

    return h


def system_effet_de_serre(z):

    """
    Résout le système formé des équations   F[0] = 0,
                                            F[1] = 0,
                                            F[2] = 0,
                                            F[3] = 0,
                                            F[4] = 0.

    Constantes / Valeurs des tables utilisées : sigma
    Entrées : Fd, Fi, T_max, h
    Sorties : P, Fp, Fs, Tp, Ts

    """

    P = z[0]
    Fp = z[1]
    Fs = z[2]
    Tp = z[3]
    Ts = z[4]

    F = empty(5)

    F[0] = h * (Tp - T_max) + h * (Ts - T_max) - P
    F[1] = sigma * pow(Tp, 4) - Fp
    F[2] = sigma * pow(Ts, 4) - Fs
    F[3] = P + Fp - Fd - Fi
    F[4] = Fs + h * (Ts - T_max) - Fd - Fp

    return F


def effet_de_serre():

    """
    Calcule la puissance captée par la serre par unité de surface.

    Constantes / Valeurs des tables utilisées : sigma
    Entrées : Fd, Fi, T_max, h
    Sorties : P, Fp, Fs, Tp, Ts

    """

    Init = array([1,1,1,1,1])
    z = fsolve(system_effet_de_serre, Init)

    return z[0], z[1], z[2], z[3], z[4]


def dimension():

    """
    Calcule la longueur du séchoir (en ayant préalablement fixé une largeur).

    Constantes / Valeurs des tables utilisées : Lh, Cp
    Entrées : Q_massique, T_max, T_amb, J, P, l
    Sorties : P_tot, L

    """

    P_tot = (Q_massique * Cp * (T_max - T_amb) + J * Lh)
    L = P_tot / (P * l)

    return P_tot, L


# Constantes / Valeurs des tables

sigma = 5.670374e-8 # W.m^-2.K^-4
M_eau = 18.01527e-3 # kg.mol^-1
M_air = 28.9647e-3 # kg.mol^-1
R = 8.3144621 # J.mol^-1.K^-1
Lh = 2448.8e3 # J/kg
E = 1000 # W.m^-2
P_sat_T_max = 25.042e3 # Pa
P_sat_T_amb = 2.646e3 # Pa
Cp = 1.008e3 # J.kg^-1.K^-1

condu_therm = 29.16e-3 # W.m^-1.K^-1
visco_cinem = 19.36e-6 # m^2.s^-1
visco_dynam = 20.21e-6 # Pa.s
g = 9.81 # m.s^-1
Lc = 0.15 # m


# Inputs

T_max = 65 + 273.15 # K
X_max = 20/100 # (%)

T_amb = 22 + 273.15 # K
X_amb = 60/100 # (%)
P_atm = 101325 # Pa

T_plaque = 69 + 273.15 # K

m_produit = 0.5 # kg
X_0 = 3 # kg_eau / kg_matière_sèche
X_f = 0.1 # kg_eau / kg_matière_sèche
t = 5 * 3600 # s

rayon_ventilo = 0.02 # m
l = 0.3 # m


# Intermédiaires

T_dp = environnement()[0]
T_sky = environnement()[1]
Fd = environnement()[2]
Fi = environnement()[3]
P_vap_max = environnement()[4]
Y_max = environnement()[5]
P_vap_amb = environnement()[6]
Y_amb = environnement()[7]

m_seche = ventilation()[0]
delta_masse_eau = ventilation()[1]
J = ventilation()[2]
rho_air = ventilation()[3]
Q_massique = ventilation()[4]
Q_volumique = ventilation()[5]
vitesse_air = ventilation()[6]

h = research_h()

P = effet_de_serre()[0]
Fp = effet_de_serre()[1]
Fs = effet_de_serre()[2]
Tp = effet_de_serre()[3]
Ts = effet_de_serre()[4]

P_tot = dimension()[0]
L = dimension()[1]


# Outputs

print(colored("Température de rosée := " + str(round(T_dp - 273.15, 2)) + "°C", color="green"))
print(colored("Température du ciel := " + str(round(T_sky - 273.15, 2)) + "°C", color=None))
print(colored("Flux direct := " + str(round(Fd, 4)) + " W/m\xb2", color="red"))
print(colored("Flux indirect := " + str(round(Fi, 4)) + " W/m\xb2", color="red"))
print(colored("Pression de vapeur à l'intérieur du séchoir := " + str(round(P_vap_max, 4)) + " Pa", color=None))
print(colored("Humidité absolue à l'intérieur du séchoir := " + str(round(Y_max, 4)) + " kg_eau/kg_air", color="green"))
print(colored("Pression de vapeur du milieu ambiant := " + str(round(P_vap_amb, 4)) + " Pa", color=None))
print(colored("Humidité absolue du milieu ambiant := " + str(round(Y_amb, 4)) + " kg_eau/kg_air", color="green"), end="\n\n")

print(colored("Quantité de matière sèche := " + str(m_seche * 1000) + " g", color=None))
print(colored("Variation de masse d'eau du produit := " + str(delta_masse_eau * 1000) + " g", color=None))
print(colored("Vitesse d'évaporation de l'eau := " + str(round(J * 1000, 4)) + " g/s", color=None))
print(colored("Masse volumique de l'air := " + str(round(rho_air, 4)) + " kg/m\xb3", color="green"))
print(colored("Débit massique := " + str(round(Q_massique, 8)) + " kg/s", color="red"))
print(colored("Débit volumique := " + str(round(Q_volumique, 8)) + " m\xb3/s", color="red"))
print(colored("Vitesse de l'air à l'entrée du séchoir := " + str(round(vitesse_air, 4)) + " m/s", color="red"), end="\n\n")

print(colored("Coefficient de transfert thermique := " + str(round(h, 4)) + " W/(m\xb2.K)", color="green"), end="\n\n")

print(colored("Puissance := " + str(round(P, 4)) + " W/m\xb2", color="green"))
print(colored("Flux émis par le plastique := " + str(round(Fp, 4)) + " W/m\xb2", color=None))
print(colored("Flux émis par le sol := " + str(round(Fs, 4)) + " W/m\xb2", color=None))
print(colored("Température du plastique := " + str(round(Tp - 273.15, 2)) +  "°C", color=None))
print(colored("Température du sol := " + str(round(Ts - 273.15, 2)) + "°C", color=None), end="\n\n")

print(colored("Puissance totale captée par la serre := " + str(round(P_tot, 4)) + " W", color="red"))
print(colored("Longueur du séchoir := " + str(round(L * 100, 2)) + " cm", color="red"))
